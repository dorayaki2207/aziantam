//月夜
//stage.cpp
//2020.05.13

#include "DxLib.h"
#include "main.h"
#include "stage.h"
#include "player.h"
#include "enemy.h"

//変数
int chipImage[81];			//マップチップ画像
int stageOffset;

//マップの配列

//ダンジョン
//村のマップ
int stage[MAP_Y][MAP_X] = {
{ 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2},
{ 2,14,14,14,14, 2,14,2,14,14, 2,14,14,14,14, 14,14,14,2,14, 14,14,14,14,2},
{ 2,14,14,2,14, 2,14,14,14,14, 2,14,2,2,2, 2,2,14,2,14, 2,2,2,2,2 },
{ 2,14,2,2,14, 2,14,2,14,14, 2,14,14,14,2, 14,2,14,2,14, 14,14,14,14,2 },
{ 2,14,14,2,14, 14,14,2,14,14, 2,14,14,2,14, 14,2,14,2,2, 2,2,2,14,2 },

{ 2,2,14,14,2, 2,2,2,2,14, 14,14,2,14,14, 2,2,14,14,14, 14,14,2,14,2 },
{ 2,2,14,14,14, 14,2,14,2,2, 2,2,14,14,2, 2,14,2,2,2, 14,14,14,14,2 },
{ 2,14,14,2,2, 14,14,14,14,14, 14,14,14,2,2, 14,14,14,14,2, 14,2,2,2,2 },
{ 2,14,2,2,14, 2,14,14,2,14, 14,14,14,2,14, 14,2,14,14,2, 14,14,14,14,2 },
{ 2,14,2,14,14, 2,14,2,14,14, 2,8,2,14,2, 2,14,14,2,2, 2,2,2,14,2 },

{ 2,14,14,2,14, 14,14,2,14,2, 14,14,2,14,14, 2,14,2,14,14, 14,14,2,14,2 },
{ 2,14,2,14,2, 14,2,14,14,2, 8,2,14,2,14, 2,14,14,8,2, 8,14,2,14,2 },
{ 2,14,2,14,14, 2,2,14,2,14, 14,14,2,14,14, 14,2,2,2,2, 2,14,2,14,2 },
{ 2,14,14,2,14, 2,14,14,2,14, 14,2,14,2,14, 14,14,14,14,14, 2,14,2,14,2 },
{ 2,14,8,14,2, 2,14,2,14,14, 14,14,2,14,14, 2,2,2,2,2, 2,14,2,14,2 },

{ 2,14,2,14,2, 14,2,2,14,2, 14,2,2,14,14, 14,14,14,2,14, 14,14,14,14,2 },
{ 2,14,2,14,2, 14,2,2,14,14, 2,14,2,2,2, 14,2,14,2,14, 2,2,2,2,2 },
{ 2,14,2,14,2, 14,14,14,14,14, 2,14,14,2,14, 8,2,14,2,14, 14,14,14,14,2 },
{ 2,14,2,2,14, 14,2,2,2,2, 2,2,14,2,14, 2,2,14,2,14, 2,2,2,14,2 },
{ 2,14,2,14,14, 14,2,14,14,14, 2,14,14,2,14, 14,2,14,14,14, 2,14,14,14,2 },

{ 2,2,2,2,14, 2,2,14,2,8, 2,14,2,2,2, 14,2,2,2,2, 2,14,2,14,2 },
{ 2,14,14,14,14, 14,14,14,2,14, 2,14,14,2,14, 14,14,14,14,14, 14,14,2,14,2 },
{ 2,14,8,2,2, 2,2,14,2,14, 2,14,14,14,2, 8,2,2,2,2, 2,2,2,14,2 },
{ 2,15,2,14,14, 14,14,8,2,14, 14,14,14,2,14, 14,14,14,14,14, 14,14,14,14,2 },
{ 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2, 2,2,2,2,2 },
};

XY mapPos;		//マップチップのオフセット
STAGE_ID stageID;		//ステージID
XY mapSize;		//マップのサイズ

//ステージ情報の初期化
void StageSystemInit(void)
{
	//グラフィックの登録
	//マップチップの画像を読み込む
	LoadDivGraph("", 81, 9, 9, CHIP_SIZE_Y, CHIP_SIZE_X, chipImage);

	mapPos.x = 0;
	mapPos.y = 0;

	stageOffset = 0;

	//マップ作成データ
	stageID = STAGE_ID_START;
	SetMapData(STAGE_ID_START);
}

//ステージ情報のゲーム初期化
void StageGameInit(void)
{
	mapPos.x = 0;
	mapPos.y = 0;

	stageID = STAGE_ID_START;
	SetMapData(STAGE_ID_START);
}

//ピクセル座標系からマップ配列座標系に変換する
XY Pos2Index(XY pos)
{
	XY tmp;

	tmp.x = pos.x / CHIP_SIZE_X;		//posのx座標を変換
	tmp.y = pos.y / CHIP_SIZE_Y;		//posのy座標を変換

	//変換した値を返す
	return tmp;
}

//指定した座標が通過可能かを返す　true:通過できる
bool IsPass(XY pos)
{
	XY indexPos;

	indexPos = Pos2Index(pos);

	switch (map[index.y][indexPos.x])
	{
		//通れる




		//通れない
		return false;
		break;

	default:
		break;
	}
	return true;
}

//指定スタ座標が特別にイベントを起こすかを確認する
EVENT_ID GetEvent(XY pos)
{
	XY indexPos;

	indexPos = Pos2Index(pos);

	switch (map[index.y][indexPos.x])
	{
		



		//イベントの発生場所
		return true;
		break;

		
	default:
		break;
	}
	//イベントなし
	return false;
}

//ステージでーだをマップ配列にコピーする
void SetMaoData(STAGE_ID stageID)
{
	for (int y = 0; y < MAP_Y; y++)
	{
		for (int x = 0; x < MAP_Y; x++)
		{
			map[y][x] = 0;
		}
	}
}

//ゲーム画面の表示処理
void StageGameDraw(void)
{
	for (int y = 0; y < mapSize.y; y++)
	{
		for (int x = 0; x < mapSize.x; x++)
		{
			DrawGraph(x*CHIP_SIZE_X + -mapPos.x
				, y*CHIP_SIZE_Y + -mapPos.y
				, chipImage[map[y][x]], true);
		}
	}
}