#include "DxLib.h"
#include "test.h"
#include "Item.h"

//-----外部変数宣言
//ｱｲﾃﾑ関連
//御札
CHARACTER itemF[ITEM_MAX];					//	ﾄﾞﾛｯﾌﾟｱｲﾃﾑ変数格納用
CHARACTER itemFmaster[ITEM_TYPE_F_MAX];
int itemFImage[ITEM_TYPE_F_MAX];					//	ﾄﾞﾛｯﾌﾟｱｲﾃﾑ画像：通常時
//三種の神器
CHARACTER itemB[ITEM_TYPE_B_MAX];
int itemBImage[ITEM_TYPE_B_MAX];



//-----ｱｲﾃﾑ情報の初期化
void ItemSystmeInit(void)
{
	//-----変数の初期化
	//御札
	itemFmaster[ITEM_TYPE_HI].charType = ITEM_TYPE_HI;				//	御札の種類	：	火
	itemFmaster[ITEM_TYPE_MIZU].charType = ITEM_TYPE_MIZU;			//	御札の種類	：	水
	itemFmaster[ITEM_TYPE_KAZE].charType = ITEM_TYPE_KAZE;			//	御札の種類	：	風
	itemFmaster[ITEM_TYPE_KAIFUKU].charType = ITEM_TYPE_KAIFUKU;	//	御札の種類	：	回復
	//御札まとめて処理
	for (int i = 0; i < ITEM_TYPE_F_MAX; i++)
	{
		itemFmaster[i].pos = { 50,50 };																//　御札の地図上の座標
		itemFmaster[i].size = { 20,20 };															//	御札の画像ｻｲｽﾞ
		itemFmaster[i].offsetSize = { itemFmaster[i].size.x / 2,itemFmaster[i].size.y / 2 };		//　御札のｵﾌｾｯﾄ
		itemFmaster[i].point = 0;																	//	御札の枚数
		itemFmaster[i].lifeMax = 20;																//	御札の体力最大値（表示時間）
		itemFmaster[i].life = itemFmaster[i].lifeMax;												//	御札の体力

	}

	//三種の神器
	itemB[ITEM_TYPE_KEN].charType = ITEM_TYPE_KEN;					//	三種の神器　：　剣
	itemB[ITEM_TYPE_KAGAMI].charType = ITEM_TYPE_KAGAMI;			//	三種の神器　：　鏡
	itemB[ITEM_TYPE_MAGATAMA].charType = ITEM_TYPE_MAGATAMA;		//	三種の神器　：　勾玉
	//三種の神器まとめて処理
	for (int i = 0; i < ITEM_TYPE_B_MAX; i++)
	{
		itemB[i].size = { 20,20 };																	//	三種の神器の画像ｻｲｽﾞ
		itemB[i].offsetSize = { itemB[i].size.x / 2,itemB[i].size.y / 2 };							//　三種の神器のｵﾌｾｯﾄ
		
	}




	//-----ｸﾞﾗﾌｨｯｸの登録
	//御札
	itemFImage[ITEM_TYPE_HI] = LoadGraph("御札案/R.png");			//	火の御札
	itemFImage[ITEM_TYPE_MIZU] = LoadGraph("御札案/B.png");			//	水の御札
	itemFImage[ITEM_TYPE_KAZE] = LoadGraph("御札案/G.png");			//	風の御札
	itemFImage[ITEM_TYPE_KAIFUKU] = LoadGraph("御札案/P.png");		//	回復の御札
	//三種の神器
	itemBImage[ITEM_TYPE_KEN] = LoadGraph("aitem/剣20.png");		//	三種の神器　：　剣
	itemBImage[ITEM_TYPE_KAGAMI] = LoadGraph("aitem/鏡20.png");		//	三種の神器　：　鏡
	itemBImage[ITEM_TYPE_MAGATAMA] = LoadGraph("aitem/勾玉20.png");	//	三種の神器　：　勾玉
}

void ItemGameInit(void)
{
	//御札
	for (int i = 0; i < ITEM_MAX; i++)
	{
		itemF[i] = itemFmaster[GetRand(ITEM_TYPE_F_MAX - 1)];
		itemF[i].pos.x = GetRand(SCREEN_SIZE_X - 1);
		itemF[i].pos.y = GetRand(SCREEN_SIZE_Y - 1);
	//	itemF[i].point = 0;																//	御札の枚数
	//	itemF[i].lifeMax = 20;															//	御札の体力最大値（表示時間）
	//	itemF[i].life = itemF[i].lifeMax;												//	御札の体力

	}
	//三種の神器
	for (int i = 0; i < ITEM_TYPE_B_MAX; i++)
	{
		itemB[i].pos = { 50,120 };									//　三種の神器の地図上の座標
		itemB[i].lifeMax = 20;										//	三種の神器の体力最大値（表示時間）
		itemB[i].life = itemB[i].lifeMax;							//	三種の神器の体力
	}

	for (int j = 0; j < SCR_MAX; j++)
	{
		if (totalScrNew > totalScr[j])
		{
			if (j < SCR_MAX - 1)
			{
				for (int f = SCR_MAX - 2; f >= j; f--)
				{
					totalScr[j + 1] = totalScr[j];
				}
			}
			totalScr[j] = totalScrNew;
			break;
		}
	}
	FILE* fp = NULL;
	//	ﾌｧｲﾙﾎﾟｲﾝﾀ、ﾌｧｲﾙ名、ﾌｧｲﾙｵｰﾌﾟﾝ形式
	// ﾌｧｲﾙが開けたときの処理
	if (fopen_s(&fp, "scr.dat", "w+") == 0)
	{
		// 配列の先頭を渡す、
		fwrite(
			totalScr,
			sizeof(totalScr[0]),
			SCR_MAX,
			fp
		);
		fclose(fp);
	}

}

void ItemControl(void)
{
}

void ItemGameDraw(void)
{
	//-----描画処理
	//御札
	for (int i = 0; i < ITEM_MAX; i++)
	{
		//生きてる御札のみ表示
		if (itemF[i].life > 0)
		{
			//-----画像描画
			DrawGraph(itemF[i].pos.x - itemF[i].offsetSize.x
				, itemF[i].pos.y - itemF[i].offsetSize.y
				, itemFImage[itemF[i].charType]
				, true);

			DrawBox(itemF[i].pos.x - itemF[i].offsetSize.x
				, itemF[i].pos.y - itemF[i].offsetSize.y
				, itemF[i].pos.x - itemF[i].offsetSize.x + itemF[i].size.x
				, itemF[i].pos.y - itemF[i].offsetSize.y + itemF[i].size.y
				, 0xFF00FF, false);
		}
	}
	//三種の神器
	for (int i = 0; i < ITEM_TYPE_B_MAX; i++)
	{
		if (itemB[i].life > 0)
		{
			DrawGraph((itemB[i].pos.x   - itemB[i].offsetSize.x )*i
				, itemB[i].pos.y - itemB[i].offsetSize.y
				, itemBImage[itemB[i].charType]
				, true);

			DrawBox((itemB[i].pos.x - itemB[i].offsetSize.x)*i
				, itemB[i].pos.y - itemB[i].offsetSize.y
				, (itemB[i].pos.x - itemB[i].offsetSize.x) *i+ itemB[i].size.x
				, itemB[i].pos.y - itemB[i].offsetSize.y + itemB[i].size.y
				, 0xFF00FF, false);

		}
	}
}

//-----弾と敵の当たり判定　(true : あたり, false : はずれ)
bool ItemHitCheck(XY sPos, int sSize)
{
	//全ての敵に当たり判定を実施する
	for (int i = 0; i < ITEM_MAX; i++)
	{
		if (itemF[i].life > 0)
		{
			if (((itemF[i].pos.x - itemF[i].size.x / 2) < (sPos.x + sSize / 2))
				&& ((itemF[i].pos.x + itemF[i].size.x / 2) > (sPos.x - sSize / 2))
				&& ((itemF[i].pos.y - itemF[i].size.y / 2) < (sPos.y + sSize / 2))
				&& ((itemF[i].pos.y + itemF[i].size.y / 2) > (sPos.y - sSize / 2)))
			{
				//当たった時、ｴﾈﾐｰの体力を減らす
				itemF[i].life = 0;
				//ｴﾈﾐｰを倒した時だけﾎﾟｲﾝﾄ加算
				//御札に触れたら加算
				if (itemF[i].charType == ITEM_TYPE_HI)
				{
					itemF[ITEM_TYPE_HI].point++;
					//hiCnt++;
				}
				if (itemF[i].charType == ITEM_TYPE_MIZU)
				{
					itemF[ITEM_TYPE_MIZU].point++;
					//mizuCnt++;
				}
				if (itemF[i].charType == ITEM_TYPE_KAZE)
				{
					itemF[ITEM_TYPE_KAZE].point++;
					//kazeCnt++;
				}
				if (itemF[i].charType == ITEM_TYPE_KAIFUKU)
				{
					itemF[ITEM_TYPE_KAIFUKU].point++;
					//kaifukuCnt++;
				}
				return true;
			}
		}
	}
	//弾が外れた時
	return false;
}

//-----弾を消滅させる
void DeleteItem(int index)
{
	itemF[index].life = 0;
	
};