#include "DxLib.h"
#include "test.h"
#include "Stage.h"

int chipImage[81];
int map[MAP_Y][MAP_X] =
{
{  6, 7, 7, 8,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,25,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15, 7,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },

{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,25,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,25, 7,26,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15, 7,16, 8,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },

{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,16,26,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,25,16, 8,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15, 7,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,25,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },

{ 15,16, 7,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,25,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16, 7,26,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,16, 8,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },

{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,25,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16, 7,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,25,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15, 7,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8 ,8, 58,58,58,58,58 },

{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,16,17,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58,58,58, 58,58,58, 8, 8, 58,58,58,58,58 },
{ 15,16,16,17, 7,  7, 7, 7, 7, 7,  7, 7, 7, 7, 7,  7, 7, 7, 7, 7,  7, 7, 7,16, 8, 58,58,58,58,58 },
{ 15,16,16,16,16, 16,16,16,16,16, 16,16,16,16,16, 16,16,16,16,16, 16,16,16,16,17, 58,58,58,58,58 },
{ 24,25,25,25,25, 25,25,25,25,25, 25,25,25,25,25, 25,25,25,25,25, 25,25,25,25,26, 58,58,58,58,58 },
};

XY mapPos;	//œØÃﬂÇÃµÃæØƒ
XY mapSize;	//œØÃﬂÇÃª≤Ωﬁ
PASS_ID passID;

//-----Ω√∞ºﬁèÓïÒÇÃèâä˙âª
void StageSystemInit(void)
{
	//-----∏ﬁ◊Ã®Ø∏ÇÃìoò^
	LoadDivGraph("aitem/map.png", 81, 9, 9, CHIP_SIZE_X, CHIP_SIZE_Y, chipImage);

	//-----èâä˙âª
	//ç¿ïW
//	mapPos = { 0,0 };
	passID = PASS_NON;
}

void StageGameInit(void)
{
	//ç¿ïW
	mapPos = { 0,0 };
}



//-----Ω√∞ºﬁï`âÊèàóù
void StageGameDraw(void)
{
	for (int y = 0; y < MAP_Y; y++)
	{
		for (int x = 0; x < MAP_X; x++)
		{
			DrawGraph(x * CHIP_SIZE_X + mapPos.x
				, y * CHIP_SIZE_Y + mapPos.y
				, chipImage[map[y][x]], true);
		}
	}
}





//Àﬂ∏æŸç¿ïWånÇ©ÇÁœØÃﬂîzóÒç¿ïWånÇ…ïœä∑Ç∑ÇÈ
XY PosToIndex(XY pos)
{
	XY tmp;

	tmp.x = pos.x / CHIP_SIZE_X;
	tmp.y = pos.y / CHIP_SIZE_Y;		// posÇÃyç¿ïW


	return tmp;
}

bool IsPass(XY pos)
{
	XY indexPos = PosToIndex(pos);

	switch (map[indexPos.y][indexPos.x])
	{
		//êX
	case 6:
	case 7:
	case 8:
	case 15:
	case 16:
	case 17:
	case 24:
	case 25:
	case 26:
		//ä‚
	case 76:
		return false;
		break;
	default:
		break;
	}
	

	return true;
}

//
//bool IsEnemyPass(XY pos)
//{
//	XY indexPos;
//	indexPos = PosToIndex(pos);
//
//	switch (map[indexPos.y][indexPos.x])
//	{
//		//ëê
//	case 58:
//		return false;
//		break;
//	default:
//		break;
//	}
//
//
//	return true;
//}
//


//èoåªâ¬î\Ç©Ç«Ç§Ç©
PASS_ID Pass(XY pos)
{
	XY indexPos;

	indexPos = PosToIndex(pos);


	switch (map[indexPos.y][indexPos.x])
	{
	case 58:			
		//èoåªâ¬î\
		return PASS_OK;
		break;
	default:
		break;
	}
	return PASS_NON;

}
